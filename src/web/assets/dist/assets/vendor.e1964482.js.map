{"version":3,"file":"vendor.e1964482.js","sources":["../../../../../buildchain/node_modules/vue-confetti/src/utils/get-random-number.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/base.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/circle.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/rect.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/heart.js","../../../../../buildchain/node_modules/vue-confetti/src/particles/image.js","../../../../../buildchain/node_modules/vue-confetti/src/factories/particle.js","../../../../../buildchain/node_modules/vue-confetti/src/particle-manager.js","../../../../../buildchain/node_modules/vue-confetti/src/canvas.js","../../../../../buildchain/node_modules/vue-confetti/src/confetti.js"],"sourcesContent":["/**\n * Return a random number.\n * @param {Number} [min]\n *   The minimum number (default 1).\n * @param {Number} [max]\n *   The maximum number (default min + 1).\n * @param {boolean} round\n *   True to round the number to the nearest integer, false otherwise.\n * @return {Number}\n *   A random number between min and max.\n */\nexport default (min = 1, max = min + 1, round = false) => {\n  const minN = parseFloat(min);\n  const maxN = parseFloat(max);\n  const n = Math.random() * (maxN - minN) + minN;\n  return round ? Math.round(n) : n;\n};\n","import getRandomNumber from '../utils/get-random-number';\n\n/**\n * A particle that can be drawn on a canvas.\n */\nexport default class BaseParticle {\n  /**\n   * Initialise.\n   * @param {object} options\n   *   The particle options.\n   * @param {string} options.color\n   *   The particle color.\n   * @param {number} options.size\n   *   The particle size.\n   * @param {number} options.dropRate\n   *   The speed at which particles fall.\n   */\n  constructor({\n    color = 'blue',\n    size = 10,\n    dropRate = 10,\n  } = {}) {\n    this.color = color;\n    this.size = size;\n    this.dropRate = dropRate;\n  }\n\n  /**\n   * Setup.\n   * @param {options} opts\n   *   The particle options.\n   */\n  setup({\n    canvas,\n    wind,\n    windPosCoef,\n    windSpeedMax,\n    count,\n  }) {\n    this.canvas = canvas;\n    this.wind = wind;\n    this.windPosCoef = windPosCoef;\n    this.windSpeedMax = windSpeedMax;\n    this.x = getRandomNumber(-35, this.canvas.width + 35);\n    this.y = getRandomNumber(-30, -35);\n    this.d = getRandomNumber(150) + 10; // density\n    this.particleSize = getRandomNumber(this.size, this.size * 2);\n    this.tilt = getRandomNumber(10);\n    this.tiltAngleIncremental = (\n      (getRandomNumber(0, 0.08) + 0.04) * (getRandomNumber() < 0.5 ? -1 : 1)\n    );\n    this.tiltAngle = 0;\n    this.angle = getRandomNumber(Math.PI * 2);\n    this.count = count + 1;\n    this.remove = false;\n    return this;\n  }\n\n  /**\n   * Update the particle.\n   */\n  update() {\n    this.tiltAngle += (this.tiltAngleIncremental * (\n      Math.cos(this.wind + (this.d + this.x + this.y) * this.windPosCoef)\n      * 0.2 + 1\n    ));\n    this.y += (Math.cos(this.angle + this.d) + parseInt(this.dropRate, 10)) / 2;\n\n    this.x += (Math.sin(this.angle) + Math.cos(\n      this.wind + (this.d + this.x + this.y) * this.windPosCoef,\n    )) * this.windSpeedMax;\n    this.y += Math.sin(\n      this.wind + (this.d + this.x + this.y) * this.windPosCoef,\n    ) * this.windSpeedMax;\n    this.tilt = (Math.sin(this.tiltAngle - (this.count / 3))) * 15;\n  }\n\n  /**\n   * Check if the particle is past the bottom of the canvas;\n   */\n  pastBottom() {\n    return this.y > this.canvas.height;\n  }\n\n  /**\n   * Draw a particle.\n   */\n  draw() {\n    this.canvas.ctx.fillStyle = this.color;\n    this.canvas.ctx.beginPath();\n    this.canvas.ctx.setTransform(\n      Math.cos(this.tiltAngle), // set the x axis to the tilt angle\n      Math.sin(this.tiltAngle),\n      0,\n      1,\n      this.x,\n      this.y, // set the origin\n    );\n  }\n\n  /**\n   * Kill the particle after it has left the screen.\n   */\n  kill() {\n    this.remove = true;\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a circular particle.\n */\nexport default class CircleParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.arc(0, 0, (this.particleSize / 2), 0, Math.PI * 2, false);\n    this.canvas.ctx.fill();\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a rectangular particle.\n */\nexport default class RectParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.fillRect(0, 0, this.particleSize, this.particleSize / 2);\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing a heart-shaped particle.\n */\nexport default class HeartParticle extends BaseParticle {\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    const curveTo = (cp1x, cp1y, cp2x, cp2y, x, y) => {\n      this.canvas.ctx.bezierCurveTo(\n        cp1x * (this.particleSize / 200),\n        cp1y * (this.particleSize / 200),\n        cp2x * (this.particleSize / 200),\n        cp2y * (this.particleSize / 200),\n        x * (this.particleSize / 200),\n        y * (this.particleSize / 200),\n      );\n    };\n    this.canvas.ctx.moveTo(37.5 / this.particleSize, 20 / this.particleSize);\n    curveTo(75, 37, 70, 25, 50, 25);\n    curveTo(20, 25, 20, 62.5, 20, 62.5);\n    curveTo(20, 80, 40, 102, 75, 120);\n    curveTo(110, 102, 130, 80, 130, 62.5);\n    curveTo(130, 62.5, 130, 25, 100, 25);\n    curveTo(85, 25, 75, 37, 75, 40);\n    this.canvas.ctx.fill();\n  }\n}\n","import BaseParticle from './base';\n\n/**\n * Class representing an image particle.\n */\nexport default class ImageParticle extends BaseParticle {\n  /**\n   * Initialise\n   * @param {HTMLImageElement} imgEl\n   *  An image element to pass through to ctx.drawImage.\n   */\n  constructor(opts, imgEl) {\n    super(opts);\n\n    this.imgEl = imgEl;\n  }\n\n  /**\n   * Draw the particle.\n   */\n  draw() {\n    super.draw();\n    this.canvas.ctx.drawImage(this.imgEl, 0, 0, this.particleSize, this.particleSize);\n  }\n}\n","import getRandomNumber from '../utils/get-random-number';\nimport {\n  CircleParticle,\n  RectParticle,\n  HeartParticle,\n  ImageParticle,\n} from '../particles';\n\n/**\n * Create a particle based on the given options.\n * @param {object} options\n *   The particle options.\n * @returns {object}\n *   A particle.\n */\nexport default class ParticleFactory {\n  constructor() {\n    this.cachedImages = {};\n  }\n\n  /**\n   * Create an image element from the given source.\n   * @param {string} imgSource\n   *   The path to the image.\n   */\n  createImageElement(imgSource) {\n    const imgEl = document.createElement('img');\n    imgEl.setAttribute('src', imgSource);\n    return imgEl;\n  }\n\n  /**\n   * Get an image element from a source string.\n   * @param {string} imgSource\n   *   The path to the image.\n   */\n  getImageElement(imgSource) {\n    if (!this.cachedImages[imgSource]) {\n      this.cachedImages[imgSource] = this.createImageElement(imgSource);\n    }\n    return this.cachedImages[imgSource];\n  }\n\n  /**\n   * Get a random particle from the list of available particles.\n   * @param {Object} options\n   *   The particle options.\n   */\n  getRandomParticle(options = {}) {\n    const particles = options.particles || [];\n\n    if (particles.length < 1) {\n      return {};\n    }\n\n    return particles[Math.floor(Math.random() * particles.length)];\n  }\n\n  /**\n   * Get the particle defaults.\n   * @param {Object} options\n   *   The particle options.\n   */\n  getDefaults(options = {}) {\n    return {\n      type: options.defaultType || 'circle',\n      size: options.defaultSize || 10,\n      dropRate: options.defaultDropRate || 10,\n      colors: options.defaultColors || [\n        'DodgerBlue',\n        'OliveDrab',\n        'Gold',\n        'pink',\n        'SlateBlue',\n        'lightblue',\n        'Violet',\n        'PaleGreen',\n        'SteelBlue',\n        'SandyBrown',\n        'Chocolate',\n        'Crimson',\n      ],\n      url: null,\n    };\n  }\n\n  /**\n   * Create a particle.\n   * @param {Object} options\n   *   The particle options.\n   */\n  create(options) {\n    const defaults = this.getDefaults(options);\n    const particle = this.getRandomParticle(options);\n\n    const opts = Object.assign(defaults, particle);\n\n    // Set a random color from the array\n    const colorIndex = getRandomNumber(0, opts.colors.length - 1, true);\n    opts.color = opts.colors[colorIndex];\n\n    if (opts.type === 'circle') {\n      return new CircleParticle(opts);\n    }\n\n    if (opts.type === 'rect') {\n      return new RectParticle(opts);\n    }\n\n    if (opts.type === 'heart') {\n      return new HeartParticle(opts);\n    }\n\n    if (opts.type === 'image') {\n      return new ImageParticle(opts, this.getImageElement(opts.url));\n    }\n\n    throw Error(`Unknown particle type: \"${opts.type}\"`);\n  }\n}\n","import ParticleFactory from './factories/particle';\n\n/**\n * A particle generation and management service.\n */\nexport default class ParticleManger {\n  /**\n   * Initialise.\n   * @param {object} particleOptions\n   *   The particle options.\n   */\n  constructor(particleOptions) {\n    this.items = [];\n    this.pool = [];\n    this.particleOptions = particleOptions;\n    this.particleFactory = new ParticleFactory();\n  }\n\n  /**\n   * Update the position of each particle.\n   *\n   * Moves particles back to the pool if past the bottom and not due for removal.\n   */\n  update() {\n    const oldItems = [];\n    const newItems = [];\n\n    this.items.forEach((particle) => {\n      particle.update();\n\n      if (particle.pastBottom()) {\n        if (!particle.remove) {\n          particle.setup(this.particleOptions);\n          oldItems.push(particle);\n        }\n      } else {\n        newItems.push(particle);\n      }\n    });\n\n    this.pool.push(...oldItems);\n\n    this.items = newItems;\n  }\n\n  /**\n   * Draw the particles currently in view.\n   */\n  draw() {\n    this.items.forEach(item => item.draw());\n  }\n\n  /**\n   * Add an item to the view.\n   */\n  add() {\n    if (this.pool.length > 0) {\n      this.items.push(this.pool.pop().setup(this.particleOptions));\n    } else {\n      this.items.push(\n        this.particleFactory.create(this.particleOptions).setup(this.particleOptions),\n      );\n    }\n  }\n\n  /**\n   * Replace particles once they have left the screen.\n   */\n  refresh() {\n    this.items.forEach((item) => {\n      item.kill();\n    });\n\n    this.pool = [];\n  }\n}\n","/**\n * Class to generate and interact with an HTML canvas.\n */\nexport default class Canvas {\n  /**\n   * Initialise.\n   * @param {HTMLCanvasElement} [canvasElement]\n   *   An optional HTMLCanvasElement to override the default.\n   */\n  constructor(canvasElement) {\n    const defaultCanvasId = 'confetti-canvas';\n\n    if (canvasElement && !(canvasElement instanceof HTMLCanvasElement)) {\n      throw new Error('Element is not a valid HTMLCanvasElement');\n    }\n\n    this.isDefault = !canvasElement;\n\n    this.canvas = canvasElement || Canvas.createDefaultCanvas(defaultCanvasId);\n\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  /**\n   * Add a fixed, full-screen canvas to the page.\n   * @returns {HTMLCanvasElement}\n   *   A full-screen canvas.\n   */\n  static createDefaultCanvas(id) {\n    const canvas = document.createElement('canvas');\n    canvas.style.display = 'block';\n    canvas.style.position = 'fixed';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.top = 0;\n    canvas.style.width = '100vw';\n    canvas.style.height = '100vh';\n    canvas.id = id;\n    document.querySelector('body').appendChild(canvas);\n    return canvas;\n  }\n\n  /**\n   * Get the canvas width.\n   * @returns {Number}\n   *   The canvas width.\n   */\n  get width() {\n    return this.canvas.width;\n  }\n\n  /**\n   * Get the canvas height.\n   * @returns {Number}\n   *   The canvas height.\n   */\n  get height() {\n    return this.canvas.height;\n  }\n\n  /**\n   * Clear the canvas.\n   */\n  clear() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Update the canvas dimensions, if necessary.\n   */\n  updateDimensions() {\n    if (!this.isDefault) {\n      return;\n    }\n\n    if (this.width !== window.innerWidth || this.height !== window.innerHeight) {\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n    }\n  }\n}\n","import ParticleManager from './particle-manager';\nimport Canvas from './canvas';\n\n/**\n * A class to drawing confetti onto a canvas.\n */\nexport default class Confetti {\n  /**\n   * Initialise.\n   */\n  constructor() {\n    this.setDefaults();\n  }\n\n  /**\n   * Initialize default.\n   */\n  setDefaults() {\n    this.killed = false;\n    this.framesSinceDrop = 0;\n    this.canvas = null;\n    this.canvasEl = null;\n    this.W = 0;\n    this.H = 0;\n    this.particleManager = null;\n    this.particlesPerFrame = 0; // max particles dropped per frame\n    this.wind = 0;\n    this.windSpeed = 1;\n    this.windSpeedMax = 1;\n    this.windChange = 0.01;\n    this.windPosCoef = 0.002;\n    this.animationId = null;\n  }\n\n  getParticleOptions(opts) {\n    const options = {\n      canvas: this.canvas,\n      W: this.W,\n      H: this.H,\n      wind: this.wind,\n      windPosCoef: this.windPosCoef,\n      windSpeedMax: this.windSpeedMax,\n      count: 0,\n    };\n\n    Object.assign(options, opts);\n\n    return options;\n  }\n\n  /**\n   * Create the confetti particles.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  createParticles(opts = {}) {\n    const particleOpts = this.getParticleOptions(opts);\n    this.particleManager = new ParticleManager(particleOpts);\n  }\n\n  /**\n   * Get a canvas element from the given options.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  getCanvasElementFromOptions(opts) {\n    const { canvasId, canvasElement } = opts;\n    let canvasEl = canvasElement;\n\n    if (canvasElement && !(canvasElement instanceof HTMLCanvasElement)) {\n      throw new Error('Invalid options: canvasElement is not a valid HTMLCanvasElement');\n    }\n\n    if (canvasId && canvasElement) {\n      throw new Error('Invalid options: canvasId and canvasElement are mutually exclusive');\n    }\n\n    if (canvasId && !canvasEl) {\n      canvasEl = document.getElementById(canvasId);\n    }\n\n    if (canvasId && !(canvasEl instanceof HTMLCanvasElement)) {\n      throw new Error(`Invalid options: element with id \"${canvasId}\" is not a valid HTMLCanvasElement`);\n    }\n\n    return canvasEl;\n  }\n\n  /**\n   * Start dropping confetti.\n   * @param {Object} opts\n   *   The particle options.\n   */\n  start(opts = {}) {\n    this.remove(); // clear any previous settings\n\n    const canvasEl = this.getCanvasElementFromOptions(opts);\n\n    this.canvas = new Canvas(canvasEl);\n    this.canvasEl = canvasEl;\n\n    this.createParticles(opts);\n    this.setGlobalOptions(opts);\n    this.animationId = requestAnimationFrame(this.mainLoop.bind(this));\n  }\n\n  /**\n   * Set the global options.\n   */\n  setGlobalOptions(opts) {\n    this.particlesPerFrame = opts.particlesPerFrame || 2;\n    this.windSpeedMax = opts.windSpeedMax || 1;\n  }\n\n  /**\n   * Stop dropping confetti.\n   */\n  stop() {\n    this.killed = true;\n    this.particlesPerFrame = 0;\n  }\n\n  /**\n   * Update the confetti options.\n   */\n  update(opts) {\n    const canvasEl = this.getCanvasElementFromOptions(opts);\n\n    // Restart if a different canvas is given\n    if (this.canvas && canvasEl !== this.canvasEl) {\n      this.start(opts);\n      return;\n    }\n\n    this.setGlobalOptions(opts);\n\n    if (this.particleManager) {\n      this.particleManager.particleOptions = this.getParticleOptions(opts);\n      this.particleManager.refresh();\n    }\n  }\n\n  /**\n   * Remove confetti.\n   */\n  remove() {\n    this.stop();\n\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n\n    if (this.canvas) {\n      this.canvas.clear();\n    }\n\n    this.setDefaults();\n  }\n\n  /**\n   * Run the main animation loop.\n   */\n  mainLoop(time) {\n    this.canvas.updateDimensions();\n    this.canvas.clear();\n\n    this.windSpeed = Math.sin(time / 8000) * this.windSpeedMax;\n    this.wind = this.particleManager.particleOptions.wind += this.windChange; // eslint-disable-line\n\n    let numberToAdd = this.framesSinceDrop * this.particlesPerFrame;\n\n    while (numberToAdd >= 1) {\n      this.particleManager.add();\n      numberToAdd -= 1;\n      this.framesSinceDrop = 0;\n    }\n\n    this.particleManager.update();\n    this.particleManager.draw();\n\n    // Stop calling if no particles left in view (i.e. it's been stopped)\n    if (!this.killed || this.particleManager.items.length) {\n      this.animationId = requestAnimationFrame(this.mainLoop.bind(this));\n    }\n\n    this.framesSinceDrop += 1;\n  }\n}\n"],"names":["ParticleManager"],"mappings":"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"}