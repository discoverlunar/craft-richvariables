{##
 # Safari 10.1 supports modules, but does not support the `nomodule` attribute - it will
 # load <script nomodule> anyway. This snippet solve this problem, but only for script
 # tags that load external code, e.g.: <script nomodule src="nomodule.js"></script>
 #
 # Again: this will **not* # prevent inline script, e.g.:
 # <script nomodule>alert('no modules');</script>.
 #
 # This workaround is possible because Safari supports the non-standard 'beforeload' event.
 # This allows us to trap the module and nomodule load.
 #
 # Note also that `nomodule` is supported in later versions of Safari - it's just 10.1 that
 # omits this attribute.
 #
 # c.f.: https://gist.github.com/samthor/64b114e4a4f539915a95b91ffd340acc
 #}
<script>
    !function(){var e=document,t=e.createElement("script");if(!("noModule"in t)&&"onbeforeload"in t){var n=!1;e.addEventListener("beforeload",function(e){if(e.target===t)n=!0;else if(!e.target.hasAttribute("nomodule")||!n)return;e.preventDefault()},!0),t.type="module",t.src=".",e.head.appendChild(t),t.remove()}}();
</script>
